buildscript() {
    repositories {
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'com.github.YvanMazy.MinecraftRemapperGradle:MinecraftRemapperGradle:9b8f7b1c98'
    }
}

plugins {
    id 'com.gradleup.shadow' version '8.3.0'
}

apply plugin: 'be.yvanmazy.minecraftremapper.gradle'

dependencies {
    // Project API
    api project(":api")

    // Logging
    api 'org.fusesource.jansi:jansi:2.4.1'

    // Testing
    testImplementation project(path: ':api', configuration: 'testClasses')
}

minecraftRemapper {
    version = "1.21.4"
    directionType = 'CLIENT'
    dependenciesConfigurations = ["integrationTestCompileOnly"]
    includeLibrariesDependency = true
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'net.transferproxy.main.Main'
    }
    archiveClassifier.set('')
}

tasks.register('copyJar', Copy) {
    onlyIf { !gradle.startParameter.taskNames.contains('assemble') }
    dependsOn(tasks.shadowJar)

    from tasks.shadowJar.archiveFile
    into project.parent.layout.buildDirectory
    rename { "${project.parent.name}-${project.parent.version}.jar" }
}

assemble.dependsOn shadowJar

testing {
    suites.register('integrationTest', JvmTestSuite) {
        targets.configureEach {

            repositories {
                maven { url 'https://jitpack.io' }
            }

            dependencies {
                implementation 'com.github.YvanMazy:RemotedMinecraft:7f570a1787'
                implementation 'org.junit.platform:junit-platform-launcher:1.11.3'
                implementation project()
            }
        }
    }
}

def integrationJavaToolchain = {
    languageVersion = JavaLanguageVersion.of(21)
    vendor = java.toolchain.vendor
}

integrationTest {
    systemProperty 'library.cache.dir', gradle.gradleUserHomeDir.toPath().resolve('caches').resolve('TransferProxy').resolve('data').toString();
    systemProperty 'tinylog.configuration', 'test-tinylog.properties'
    javaLauncher.set(javaToolchains.launcherFor(integrationJavaToolchain))
}

tasks.compileIntegrationTestJava {
    javaCompiler.set(javaToolchains.compilerFor(integrationJavaToolchain))
}